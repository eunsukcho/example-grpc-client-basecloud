// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc2
// source: proto/receiver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Receiver_Connect_FullMethodName = "/receiver.Receiver/Connect"
)

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Receiver 서비스 정의
type ReceiverClient interface {
	// 양방향 스트림 연결
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Receiver_ServiceDesc.Streams[0], Receiver_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Message, Message]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Receiver_ConnectClient = grpc.BidiStreamingClient[Message, Message]

// ReceiverServer is the server API for Receiver service.
// All implementations must embed UnimplementedReceiverServer
// for forward compatibility.
//
// Receiver 서비스 정의
type ReceiverServer interface {
	// 양방향 스트림 연결
	Connect(grpc.BidiStreamingServer[Message, Message]) error
	mustEmbedUnimplementedReceiverServer()
}

// UnimplementedReceiverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiverServer struct{}

func (UnimplementedReceiverServer) Connect(grpc.BidiStreamingServer[Message, Message]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedReceiverServer) mustEmbedUnimplementedReceiverServer() {}
func (UnimplementedReceiverServer) testEmbeddedByValue()                  {}

// UnsafeReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServer will
// result in compilation errors.
type UnsafeReceiverServer interface {
	mustEmbedUnimplementedReceiverServer()
}

func RegisterReceiverServer(s grpc.ServiceRegistrar, srv ReceiverServer) {
	// If the following call pancis, it indicates UnimplementedReceiverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Receiver_ServiceDesc, srv)
}

func _Receiver_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReceiverServer).Connect(&grpc.GenericServerStream[Message, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Receiver_ConnectServer = grpc.BidiStreamingServer[Message, Message]

// Receiver_ServiceDesc is the grpc.ServiceDesc for Receiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receiver.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Receiver_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/receiver.proto",
}
